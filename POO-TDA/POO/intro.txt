Introduction à la Programmation orienté objet.
-----brought to you by a swiss------

Cours du lundi 04/11/2013
*************************
________________
A - présentation
----------------
1
Utilisation de Ruby pour la POO, car non typé, tout, permettant une meilleure compréhension.
    Sinon : C++ très utilisé également, python de même.
Ruby est interpreté, avec un protypage rapide, une facilité d'aprentissage, syntaxe proche (+ ou -) de celle du C/C++
initiation à la conception d'interface graphique utilisateur.

2-- Objectifs de cet enseignement

Programmation :
    -compréhension des concepts de la POO
    -initiation à la pratique de la POO sur des exemples simples.
    -Savoir mettre en oeuvre des classe, des hiérarchies de classes.
    -Utilisation des bibliothèque standards
    -faciliter l'apprentissage du C++

Ruby :
    -Comprendre la philosophie, maîtriser la syntaxe/ prendre en main l'environnement


Bibliographie
-Clavel-Veillon
-Ferber
-A Quick trip to ObjectLand

Programmation procédurale:
-Un programme est une suite d'instructions éxécutées sur une machine, fonctions et procédures travaillant sur des données à distance.
Lorqu'on modifie un type de donnée/Une fonction : comment? Ou est il/elle utilisé(e)?
conception "plat de spaghetti"

Programmation Objet :
Un programme : une société d'entité.
Son éxécution : les entités collaborent pour résoudre le problème final en s'envoyant des messages.
Les entités sont des ensembles Données|Fonctions travaillant sur ces données.


____________________
Les concepts de base

Les objets : des ronds.
L'envoi de message : des éclairs vers rond
Les classes et l'instanciation : rond vers carrés.
les méthodes : carré et liste
L'héritage : Carré vers carré.


Les principes de Bases
B1 : approche simulatoire de la programmation
    notion d'objet et de message

B2 : distinction entre concepts et représentation du concept
    notions de classe et d'instances

B3 : classification des concepts
    notion d'héritage

Uniformité et simplicité des principes de base. (tous les LOO basés là dessus)

Diversité des langages et systèmes.
    différences :
        -Vérification de type
        -gestion de la mémoire
        -attributs collectifs.
___________________________
B1

*Idée de base : raisonner des objets

*Fctinmnt d'un prog en POO :
animat° d'un modele reduitd'objet réagissant à nos act° et interragissent entre eux.
*Activité
*On pense objet et envoi de message.


Exemple : empiler
Avec la POO, on envoie à 'unepile' le message 'empile' avec un paramètre 'untruc'.
C'est la pile qui est responsable de la façon de réaliser l'action.
ex : unePile.empile(unTruc)    //en Ruby


Le concept d'objet :
-Modularisation : developpement logiciel en petits modules appelées objets. Ces objets regroupent des structures de données et les opérations autorisées sur ces données.

Identité :
-Signifie que les données sont regroupées dans des entités discrètes et identifiables appelées objets.

Classification :
-Les objets ayant la même structure de données et les mêmes services se regroupent dans une classe.

L'Absraction est une vue générique d'une entité permettant de ne pas être limité par des contraintes d'ordre technique ou matériel.

L'Encapsulation :
-L'objet est indépendant parce qu'il peut gérer lui même ses données internes (il est le seul à pouvoir le faire).

Ds un système à objets, tout traitement se déroule pas-à-pas par envoi de msgs d'un obj à l'autre.

Important : principe d'autonmie des objets : les obj sont responsables des act° qu'ils savent effectuer

Différence procédural/POO : 
exemple de la liste : 
-Itération/délégation : au lieu de manipuler la liste de loin, on délègue les responsabilités aux objets (aux cellules). Ainsi, le controle est aux objets, pas au programme principal.
    La complexité : on diminue la complexité puisqu'on a pas à connaitre la fin de la liste.

****Objets informatiques*****
Qu'est-ce?
un objet réel est une entité permanente qui possède une Identité.

Un objet est défini au terme de :
    -Structure (l'obj en est fait), un ensemble de champs dont les valeurs
        -peuvent être des objets
        -définissent l'état
    -comportement (l'objet sait/peut le faire), un ensemble d'actions.

1/entité permanente : une identité = une adresse


-Distinguer un objet(une adresse) et son état défini par ses attributs/la valeur de ses champs
-Donner vie a un objet en lui permettant à réagir quand on lui envoie msg, en éxécutant la méthode associée, qui dépend de l'état de l'objet.

Une classe est un type abstrait de données.
Exemple du compten en banque :
La classe Compte comprend un structure (numéro, solde, titulaire) et son comportement (donneTonSolde, depose, retire, afficheToi).
Les objets concrets sont les instances de classe : mon compte, celui de X ou de N sont des instances de la classe comptes.

Une classe est un texte structuré qui rassemble une liste de noms de champs (variables d'instances), un catalogue de procédures (méthode)s comportant leur nom et leur code.

Réalisation du modèle informatique se fait ejn 2 étapes:
1/Définition des classes d'objets
2/Création des instances dont l'ensemble compose le modèle.

L'activation du modèle se fait par envoi d'un message à un objet du modèle.

Programmer objet consite à :
-concevoir les classes
-coder les classes
-créer les instances de ces classes.

Un objet : Une identité + un état + un comportement


______________
Ruby, Panorama
--------------

cours du 12/11/2013

A-Introduction à Ruby
     1-Pourquoi Ruby
     2-Premiers éléments de syntaxe
          *Les principes
          *classes/instances
          *transmission de messages

A-les Langages orientés objets
-Simula(1967)
-Smalltalk
-C++
-Objective C

Les langages purs :
-Attributs complexes & métaclasses(Kee, Art, Kool, Smeci, Crl)-> Représentation des connaissances
-Attributs simples & métaclasses(Smalltalk, Clos, Ruby)->protypage, génération d'application, simulation

Les langages hybrides :
-Type objet et type simple, pas de métaclasse utilisateur(C++, Eiffel, Simula, Objective C, Java)

Simula-> compilé, hérite d'Algol
Objective C, inspiré de Smalltalk 80
C++-> sur ensemble de C, rajoutant des fonctionnalités.

Inventeur de Ruby : Yukihiro "Matz" Matzimoto

Ruby = Smalltalk - Syntaxe inhabituelle
+script perl
+gestion des erreurs de python
+itérateurs dans CLU
+bien d'autres outils intéressants.
Ruby > (Smalltalk + Perl)/2

Ruby est :
-productif
-sans surprise
-libre & gratuit
-suffisament rapide
-multiplateforme
-facile à apprendre

Bibliographie
"Programming Ruby, The Pragmatic Programmser's Guide", Adison Wesley

Sites :
ruby.on-page.net
tryruby.org

_____________________________
Premiers éléments de Syntaxes

Les commentaires :
-En utilisant #
#commentaire sur une ligne
-En utilisant un bloc(=begin, =end)
=begin
Commentaire sur plusieurs
lignes
=end

air doc(R-doc?) permet de générer de la doc

Caractéristiques de Ruby/POO
-Toutes les entités manipulées sont des objets
-Tout objet est instance d'une classe
-Toutes les classes sont des objets
-Un objet est accessible uniquement par envoi de message
-Toutes les procédures sont des méthodes

La classe spécifie la structure et le comprtement de l'obj.
     -Nom des variables d'états(les champs)
     -Texte des procédures définissant le comportement

L'objet est responsable des valeurs des variables d'état (les attributs)
     -de l'extérieur on n'accède à l'accès des variables d'états (les attributs)
     -ie que si l'obj autorise un accès.


Définition d'une classe :

class Humain  #Définition de la classe

     def identifie       #création d'une méthode
          printf "je suis une personne.\n"
     end

     def tarif_train(age)
          if age < 12
               print "Tarif réduit.\n"
          else
               print "Tarif normal.\n"
          end
     end
end

L'opération de bas ene Rb esrt la trmission de msg à un obj (appelé receveur)

*Un msg est formé d'un sélecteur et d'éventuels arguments

*un envoi de msg
-retourne un résultat(un objet) -> caractère fonctionnel
-de plus, il peut opérer des effets de bord sur l'environnement -> caractère procédural


Interprétation des messages:
Un msg est envoyé à un objet;
-Le msg fournit le nom de la procédure(méthode) à effectuer.

Classificat° des msg
-Msgs unaires, sans arguments
-Msgs binaires, un argument
-msgs n-aires, n-1 arguments
syntaxe : ObjetReceveur.sélecteur
-Si l'objet receveur est une instance, le msg est associé à une méthode d'instance
-Si l'objet receveur est une classe, le msg est associé à une méthode de classe.

Les msgs binaires :

Un et un seul argumment
Utilisation
-Arithmétique
21 + 2 -> 23 <=> 21.+(2)
-comparaison
"b" > "a" -> True
-Concaténation
'Une' + ' Table' -> 'Une Table'

Un ou plusieurs argumments
-Le sélecteur est suivi de parenthèses donnant la liste des paramètres

Convention :
-Une méthode de modification d'une variable d'instance porte le nom de cette variable d'instance

Suivre cette convention :
-Simplifie le codage (utilisation du coding assistant (attr))
-augmente
     -La lisibilité (pour la standardisation)
     -la confusion pour les tout débutants.

Les variables locales sont les variables définies par exemple dans les méthodes.
-Elles ne sont pas accessibles en dehors de la méthode ou elles sont définies.
Les variables d'instances sont accessibles ds toutes les méthodes pour un objet particulier.
-Leur nom est précédé de @. Elles sont uniques pour chaque objet et inacessibles entre les objets.

Les variables de classes sont des variables partagées par toutes les instances de la classe.
-On peut les utiliser même sans création d'instance
-Leur nom est préfixé par @@
-les variables de classes ne sont pas accessibles par les autres classes.

Les variables globales sont préfixées par $ et accessibles par tout le monde.

Il est possible de déclarer en dabut de classe les variables d'instances. Gain en lisibilité.

ex : 
class Compte
 @numero
 @solde
 @titulaire

Il est possible d'utiliser le "coding assistant" pour générer les méthodes d'accès en lecture/écriture

Exemple dans la class compte :
attr :numero true

On peut affecterun objet comme valeur d'une variable :
-le symbole de l'affectation  est =
-L'affectation n'est pas un envoi de msg
-Les variables en Ruby ne sont pas typés

Création d'un objet à partir de sa classe en deux temps.
1)Allocation par le système d'une zone mémoire dont la taille est connue.
-Cette allocation se fait en Rby en envoyant un msg à la classe de cet objet que l'on veut créer en éxécutant une méthode de classe.
2)Initialisation des variables d'instances
-par des mesgs adressées à l'objet
-Les méthodes d'initialisation doivent être programmées.

ex : Un jukebox stats sur les chansons

class Chanson
     @@lecture = 0
     @nom; @artiste; @duree; @lecture

     def initialize(nom, artiste, duree)
          @nom, @artiste, @duree = nom, artiste, duree
          @lecture = 0
     end

     def play()
          @lecture +=1
          @@lecture +=1
          puts "cette chanson #@nom lecture : #@lecture fois, Total des lectures : #@@lecture."
     end
end


Utiliser Ruby : ligne de commande
-Interactive Ruby Shell (IRB)
-IDE (ex, FreeRide, SciTe)

Voir .... hop3x
