Cours de Bases de Données Avancée
Notes du Suisse, en complément des diapos.

Cours du 03/02/2014
http://umtice.univ-lemans.fr/enrol/self/edit.php?couseid=374

Clé d'inscription L3BdDa2014

2 contrôles continus et un TP noté.

Déinition :
une donnée est une représentation codée du monde réelle -> cela existe, trsformé en qqch de cohérent
-Un fait du monde réel -> un nom, un âge
-Une relation entre des objets

La base de donnée : ensemble organisé d'informations avec un objectif commun. -> c'est organisé, rangé, ex un annuaire.
Les bdD informatisées : un ensemble strucurée de données enregistrées sur des supports accessibles par l'ordinateur pour consultation ou mise à jour.

L'enjeux des BdD
La gestion des données
-De + en + -> web
-Gestion des données en mémoires secondaires
-Nases de données distribuées
-Accès rapide, sur et efficace
-Accès multi-utilisateurs ->Comment gérer l'accès par plusieurs utilisateurs d'une même donnée

->besoin d'une application performante.

Le sytème de gestion de BdD (SGBD)
Ensemble de procédure -> accès à la base de données; gestion , recherche.
-> Hebergement de plusieurs bases de données -> thématiques différentes

Architecture client/serveur(souvent) -> permet les accès multiples, concurentiels, et améliore la cohérence des données.

Objectifs d'un sgbd :
->Masquer la représentation physique des données et assurer la protection et la cohérence des données dans un environnement multi-utilisateurs.

Respect de :
-Indépendance physique/logique -> On a pas à savoir comment est fait l'accès aux données, un chgmt dans le type de support ne doit pas affecter les données
-Accès optimisé aux données -> rapidité de l'accès, facilité par le sgbd
-Intégration des données
-Non redondance des données
-Cohérence des données -> les données doivent correspondre à leurs équivalent du monde réel -> contrainte d'intégrité
-Partage des données -> C'est au SGBD de gérer les droits utilisateurs
-Sécurité des données -> Idem
-Résistance aux pannes -> Que se passe t'il en cas de panne, lors d'une modification? quelles sont les réactions du SGBD

Architecture ANSI/SPARC
Modélisation standard abstraite proposée en 75 par la commission SPARC de L'ANSI
Objectif séparation entre la vision de l'utilisateur et la représentation physique.

Modèle 3 couches : 
-Niveau interne/physique : organisation phyique des données, méthodes; fortement dépendant du SGBD
-Niveau conceptuel : implémentation du schéma conceptuel des données; indépendante du niveau physique
-Niveau externe : vision de tout/une partie de la BdD par un utilisateur; indépendant de la complexité du schéma conceptuel

Conséquence et avantages : 
-Vues personnalisées utilisateurs indépendantes -> chacun sa vue; -> modifiaction du schéma => pas d'impact sur l'utilisateur

-Non préocupation du stockage physique -> travail sur les données, pas sur leur stockage


Les principaux SGBD (parts de marchés)
-Oracle(45%)
-IBM DB2(21%)
-Miscosoft SQL Server(10%)
-Sybase(3,5%)

Logicels libre
-PostgreSQL
-MySQL


Description des données du monde réel pour stockage, MàJ et accessibilité

Composants du schéma conceptuel
-Objet : Object dsitinct, concret, abstrait, du monde réel
-Entité : ensemble des objets possédant le même sémantique ayant de propriétés communes
-Lien/associations : modélistation des contraintes existant sur les propriétés et les entités

Modèle relationnel :
-Une seule et unique structure de données : la relation -> tout est relation
-Des contraintes : spécification des règles que doit respecter la base données -> Les types et les contraintes explicites
-Ul langage non procédurale.

Domaine de valeurs définition :
-Ensemble d'instance ou de type élémentaire
-Défini en intention -> c'est un entier, un réel, etc
-Défini en extension -> ensemble fini de valeurs

Schéma de relation : 
Nom de la relation suivi de la liste des attributs et la déinition de leurs domaines : R(A1:D1, A2:D2, .... An:Dn)
Le dégré d'un relation = nombre d'attribut

Représentation en INTENTION de la relation -> utilisation du schéma de la relation
Représentation en EXTENSION de la relation -> utilisation de la table


Méthode MERISE
-Niveau conceptuel -> description du monde réel selon les entités et les associations
-Niveau logique ->Choix du modèle conceptuel
-Niveau physique -> Choix du SGBD

Type-entité et entité

-Entité(ou objet) -> Ce qui existe, ce qui est concret dans le monde réel -> un tuple ds la BdD
-Le type-entité : regroupement nommé cohérent d'entités -> La relation ds la BdD

À l'intérieur d'un type-entité, tout doit être cohérent

Les attributs du type entité :
-Attribut -> caractéristiques/propriété de l'entité; Associé à un type entité
-Données élémentaires -> pas d'attribut calculé
-Unicité de l'attribut dans le modèle(présent une seule fois) -> pas de clé étrangère!!!!!; deux attributs ne peuvent représenter la même caractéristique-> modification à effectuer dans le cas contraire.

Les valeurs : 
-chaque attribut est associé à un domaine de valeurs; Une valeur compatible pour chaque attribut de chaque entité.
-Pas de valeurs possible car non sens? -> revoir la modélisation

Identifiant/clé primaire du type entité
-Ensemble minimal d'attributs du type entité, permettant d'indentifier de manière unque chaque entité
    -Notion de clé primaire en MR
    -Impossibilité pour 2 entités d'un m^ type entité d'avoir le m^ identifiant


Formalisme du type entité
-Un rectangle
-Le nom encadré en haut
-L'identifiant souligné
-Les attributs



Type Association et association
-Association -> lien sémantique existant entre plusieurs entités
-Type-Association -> ensemble nommé d'associations de même caractéristiques

-Participant -> type entité impliqué dans la relation/du type association
-Collextion -> ensemble des participants du type association
-Arité -> nombre de partie du type association
-Attributs -> possibilité d'avoir des attributs si dépendance avec tous les participants.

Cardinalité du type association -> nbre de fois au minimum et au maximum où l'entité du type-entité intervient dans l'association 
-Cardinalités admises 
    -0,1 Une entité participe une fois au plus à l'association; Elle existe même si elle n'est pas impliquée dans la relation.
    -0,n Une entité participe ou non sans limitation de nombre à l'association
    -1,1 Une entité participe obligatoirement une fois (et une fois seulement) à l'association (obligatoire)
    -1,n Une entité participe au minimum une fois à l'association (une fois obligatoire)

Formalisme du type association
-Un ovale; un nom; des pates de liaison; de cardinalités


Type association hiérarchique =  1,1 ; Arité = 2; Aucun attributs dans le type association.

Type association non hiérarchique(maillée) -> 0|1,n - 0|1, n Arité de 2 à n; possibilité d'attributs dans le type association


Spécialisation : 
-Type association "êtreUn"
    -Entité générique
    -Entité spécialisé
    -Type association de cardinalité 0,1 -1,1
Chaque entité générique est associée à au plus une entité spécifique
Chaque entité spécifique est associée à exactement une entité générique
-> conséquence : L'entité spécialisée n'a pas besoin d'identifiant propre.

exemple de la personne (critique /écrivain) ou l'on spécifie une association Personne - Critique avec la relation ÊtreUn. 


Type-association réflectif -> un type association peut être lié plusieurs fois au même type entité. (exemple des employés dirigés par un autre employé.)

-Quelques remarques : 
    -spécification des rôles sur les pattes
    -Un type-association réflexif n'entraîne pas que ces instances soient réflexives
    -Un type association peut être symétrique

Identifiants absolu et identifiants relatifs.

-Identifiant absolu -> composé uniquement d'attributs propres.
-Identifiant relatif -> composé au minimum d'un attribut qui ne lui est pas propre

On modélise la dépendance forte entre les types entités par des parenthèses autour des cardinalités.

Décomposition d'un type association n-aire
-> type association n-aire :  + de 2 pattes
->

Vérification syntaxiques du MEA -> ais-je bien modélisé le problème.

Unicité de tout nom, type-entité, type-association ou attribut
-Clé primaire -> une pour chaque type entité; -> un seul attribut pour clé primaire dans un type-entité; -> aucune clé étrangère
-Attribut -> Aucun attribut ds un type association hiérarchique; -> Aucune type association hiérarchique avec arité>2; -> Normalisat° des attrbts multiples/composites.


Vérification sémantique
Clé primaire
-Dépendance fonctionnelle de chaque attrbt avec la clé primaire de son type-entité
-Type de la clé primaire /= chaine de caractère

Attribut :
-Unique apparition de chaque attribut; aucune attribut calculé

Type entité :
-Question de la factorisation possible/nécessaire.

Vérification des formes normales (définition à savoir!!!!!).
-1ere NF : Tout attribut est atomique, non décomposable.
-2eme NF : 1NF + Tout attribut non clé ne doit pas dépendre que d'une partie de la clé.
-3eme NF : 2NF + Tout attribut non clé ne doit pas dépendre d'un attribut non clé.
-BCNF : Toute dépendance est de la forme clé primaire détermine attribut.

Etapes de conception d'un MEA
-Inventaire de l'ensemble des données à considérer
-Analyse de l'information
    -Création des attributs
    -Redondance?
-Types-entités?
    -clé primaire?
-Types-associations?
    -Cardinalités?
-Vérification du modèle

Du MEA au MR
-à partir d'une modélisation en entité-association : obtenir l'ensemble des relations(tables) à implémenter.

4 règles à retenir :
-1 ere règle
    -Tous les types-entités deviennent des schémas de relation
    -Tout attribut du type-entité devient attribut du schéma de relation
    -L'identifiant du type-entité devient clé primaire du schéma de relation (attention aux types-entités spécifiques ou agrégées)

-2 eme regle type-association non hiérarchique
    -Le type-association devient un schéma de relation
    -Tout attribut du type association devient attribut du schéma de relation
    -les clés primaires des entités liés deviennent clés étrangères dans le schéma de relation
    -la détermination de la clé primaire n'est pas automatique

-3 eme regle - Type-association hiérarchique
    -Clé primaire du type entité "0|1,n" devient clé étrangère du type entité "1|1" -> contrainte not null
    -Cas d'un type association reflexif ->ajout d'un nouvel attribut dans l'entité.
    -Cas d'un type-association EtreUn -> la clé étrangère doit être rajoutée dans la clé primaire.

-4 eme regle : type-association semi-hiérarchique (0,1)
    -Si attributs -> on utilise le cas non hiérarchique
    -Si pas d'attributs ->  on utilise le cas hiérarchqiue avec contrainte not null non obligatoire.


___________________________________________________________________________________________________
Cours du 06/02/2014

SQL : Structured Query Language

Nbreuses fnctionnalités ->Gestion, insertion, suppression, modification de données...

Utilisation de l'implémentation PostgreSQL

Documentation : http://docs.postgresql.fr/8.3/

SQL = un langage fortment typée.

Une donées <-> un type
type : contrainte définie lors de la création de la table (y penser dès la modélisation)
Plus d'une trentaine de types définis dans PostgreSQL

Les types :
-Booléens et binaires
-Caractères
-Numériques
-Date et heure
-Types spécifiques


Le type NULL
-méta-valeur représentant une absence de valeur -> affecté à tout champ indépendemment de son type sauf contrainte NOT NULL
NULL n'est pas false, ce n'est pas "", ce n'est pas "NULL".
Valeur par défaut d'un champ si autorisé.


5 catégories de commandes :
-DDL : Data Définition Language -> définition des éléments de la base de données : tables, champs, clés.
-DML : Data Manipulation language -> manipulation des données : insertion, suppression, modification, extraction
-DQL : Data Query Language -> Gestion des droits d'accès aux données.
-DCL : Data Control Language -> Gestion des transactions (begin & commit, permet faire des requêtes SQL et de les éxécuter au moment du commit.
-SQL intégré.


Commandes DML : 

3 commandes de base :
-INSERT -> insertion de nvelles données
-UPDATE
-DELETE


La commande SELECT permet la consultation de la BdD.

9 clauses du SELECT dont 7 optionnelles

SELECT [ALL|DISTINCT] {* |expression [AS nom_affiché]}[,...]

Opérateurs de
-> projection : clause SELECT ........... FROM nom_table;
-> sélection : clasue WHERE contenant une condition

SELECT xxxx FROM nom_table WHERE condition

opérateurs de la clause SELECT :
* : retourne tous les champs
ALL : retourne toutes les lignes
DISTINCT : suppression des doublons
+,-,*,/ opérations si possibles
|| concaténation de chaine de caractère
AS: renome une colonne.

Clause WHERE pose une condition sur les lignes : 
Syntaxe: WHERE exp1 OPERATEUR exp2
utilisation 
-d'opérateurs logiques (=, <>, <, >, <=, >=) 
-de BETWEEN x AND y
-appartenance IN
-correspondance à un modèle LIKE
IS_NULL?

% remplace un ensemble de caractère et _ un seul caractère

négation d'une condition NOT

conditions multiples : OR et AND pour ajouter ou combiner plusieurs conditions.

Possibilité de faire des sous-requêtes comme élément de comparaison dans la condition de la clause WHERE

4 opérateurs spéficiques aux sous-requêtes :IN, EXISTS, ALL, ANY
Et NOT

Remarque IN équivalent à =ANY
NOT IN équivalent à <>ALL

Fonction d'agrégation :
Calcul d'une seule valeur à partir d'un ensemble de valeurs en entrée :
Syntaxes :
nom_agrégation (expression)
nom_agrégation (ALL expression)
nom_agrégation (DISTINCT expression)
nom_agrégation (*)
normalisation dans
-Clause SELECT
-CLAUSE HAVING

ex :
-COUNT
-SUM
-AVG
-MIN et MAX
-STDDEV
-VARIANCE


Opérateurs ensemblistes combinent le résultat de deux requêtes ou plus :
-UNION
-INTERSECT
-EXCEPT
syntaxe : requete1 {UNION|INTERSECT|EXCEPT}[ALL] requete2

La clause ORDER BY 
SANS : ordre des n-uplets non-organisé et non garanti
Permet de tirer les n-uplets résultats de la requête

Les clauses LIMIT et OFFSET 
permettent de restraindre le nombre de n-uplets renvoyés, à n'utiliser qu'en complément d'ORDER BY.


La clause GROUP BY
classement des données par groupe -> sous-ensemble de lignes ayant la même valeur
Chaque champ de la clause SELECT -> dans la clause GROUP BY (sauf agrégation)

ATTENTION une seule ligne retournée par group

La clause HAVING permet une restriction sur le groupe
HAVING est au GROUP BY ce que le WHERE est au SELECT
HAVING -> Restriction sur les groupes
WHERE -> Restriction sur les enregistrements.
même syntaxe que where mais droits aux fctns d'agrégation


La clause FROM, indispensable pour sélectionner l'ensemble des données sur lesquelles travailler.

Réellement obligatoire  si travail sur des données, non si appel de fct°

Les jointures : mot clé JION
3 types de jointures :
-Jointure croisée : CROSS JOIN
-Jointure interne : INNER JOIN
-jointure externe RIGHT/LEFT JOIN

CROSS JOIN à utiliser toutes les possibilités de combinaision entre des valeurs de différentes tables.

La INNER JOIN retourne uniquement des lignes satisfaisant la condition de jointure comparant des champs compatibles (même type de donnée, et même signification)

Possibilité d'enreichir la condition avec des AND/OR

La jointure naturelle NATURAL JOIN : cas particulier d'une jointure interne avec une condition de jointure implicite -> la valeur de TOUS les attributs ayant le même nom dans les 2 tables doivent être égales. Relie les tables en faisant correspondre tous les attributs portant sur le même nom.

À n'utiliser qu'avec prudence

Remarques sur la jointure interne :
Quand l'utiliser -> lorsqu'on veut faire une sélection à priori sur la "relation de travail"; équivalent à un utilisation d'un CROSS JOIN et d'un WHERE mais moins efficace

OUTER JOIN : 
retourne les lignes de chaque table qi satisfont la condition de chaque jointure (idem INNER JOIN) plus les lignes de ka table [droite/gauche] qui ne la satisfont pas

Condition de jointure identique à celle du INNER JOIN
On l'utilise quand en plus de la sélection sur la relation de tavail, on veut garder toutes loes données d'une table en particulier.

Possibilité de plusieurs jointures dans un seul from (lecture de droite à gauche)

Possibilité de faire une jointure réflexive, mais obligation de renommer (au minimum) une table avec AS -> attributs disponibles par notation préfixée : alias_table.nom_attribut

Possibilité de faire une jointure avec un ensemble de tuple issu d'une requête SELECT (obligation de nommer l'ensemble de tuple avec AS); à n'utiliser que si nécessaire.


Cours du 10/02/2014
_____________________________________
Les commandes INSERT UPDATE et DELETE

Commande INSERT INTO :
Syntaxe :
INSERT INTO nom_table [(nom_colonne[,...])]
{DEFAULT VALUES | VALUES ({expression |DEFAULT}[, ...]|
requete};


Déclaration implicite des valeurs
-Valeurs saisies das l'ordre des attributs de la relation
-Une valeur pour chaque attribut
-Valeurs possibles
    -Valeur spécifique
    -NULL
    -DEFAULT

possibilité de laisser les derniers champs vides, tout les autres doivent être remplis (avec NULL si besoin)

Déclaration explicite des valeurs
-Définition de l'ordre des valeurs
-Choix des champs (!! default values)

Insertion d'enregistrements issus d'une autre table avec une requête SELECT aussi complexe que nécessaire

À n'utilise que dans des cas particuliers (pour éviter redondance et incohérence).

Commande UPDATE :
permet de mettre à jours les colonnes d'une table

Modification de ces valeurs
-Pour chaque colonne spécifiée

Syntaxe
UPDATE nom_table [AS nom_alias]
    SET{nom_colonne = {expression |DEFAULT}| (nom_colonne[, ...]) = ({expression |DEFAULT})}

Modificaction simple, utilisation des valeurs existantes (+ 1, x2, etc), restriction sur les lignes avec WHERE

Modification sur plusieurs colonnes

Utilisation d'nformations issues d'autres tables (Fonctionnalités PostGreSQL non standard)
-FROM : liste de source dont les attributs apparaissent dans la clause WHERE (source : table ou vue)


Commande DELETE :
Suppression d'enregistrements d'une table
!!DANGER!! Suppression définitve si hors transaction!!!

Syntaxe : 
DELETE nom_table [[AS ] nom_alias]
    [USING liste_using]
    [WHERE condition]

USING : même syntaxe que le from de UPDATE, non standard
WHERE : même syntaxe et utilisation que le WHERE du SELECT


-----------------------------------------------------
DDL : Data Définition Language

Manipulation des Objets SQL :
-CREATE : ajout
-ALTER : modification
-DROP :suppression

Les Fameux objets
-DATABASE
-TABLE


CREATE TABLE : création d'une nouvelle table.
Déterminer le nom :
-commence par une lettre (!!pas de mot clé)
-Unique dans le schéma de la base de données

Pour chaque attribut, définir Nom, Type et Contraintes

Syntaxe :
CREATE TABLE nom_table 
( nom_attribut  type    contrainte
xxxxxxxx
PRIMAREY KEY
)

Contrainte d'intégrité : 
Assurer précision logique et validité des données de BDR

Préciser généralement à la création d'une table
Quelques exemples :
-PRIMARY KEY
    -un ou plusieurs attributs
    -unicité de la clé -> unicité de l'enregistrement


contraintes de clonnes : NOT NULL, UNIQUE, PRIMARY KEY, REFERENCES, CHECK permet de poser une conditon à l'ajout ou à la modificationdes données

REFERENCES  : spécification dans les données d'une contrainte de clé étrangère


Création d'une table à partir de données existantes, avec une requête SELECT complète.
possibilité d'une recopie complète ou partielle (avec WHERE).
!!!ATTENTION copie des données mais perte des contraintes!!!

pour recopier la structure et les contraintes NOT NULL, utilisation d'un LIKE table

pour recopier la structure, les contraintes et les indexes, avec LIKE et INCLUDING

COMMANDE ALTER

ALTER TABLE permet de modififer la structure après la création, modifiier les colonnes, les contraintes, le propriétaire, etc...

-Usages courants
    -modification sur la colonne (nom, contrainte), ajout, suppression
    -modification sur la table(nom, contraintes, colonnes), ajout, suppression de colonnes

Suppression d'une table, avec DROP TABLE, supprime à la fois la structure et le contenu, faisable uniquement par le propriétaire

Syntaxe : DROP TABLE nom_table[,...] [RESTRICT/CASCADE]

RESTRICT : suppression impossible si un autre objet dépend de la table
CASCADE : suppression des vues et des contraintes de clefs étrangères


____________________________
Quelques objets du SGBD
-TABLE
-DATABASE (Ensemble d'objets SQL, niveau hiérarchique supérieur)
-SCHEMA
-ROLE

Les catalogues systèmes
-Relations particulières ...
    -Nom commence par pg
    -Stockage de toutes les métadonnées des objets contenues dans la base données
    -Permet d'obtenir la liste des tables, des utilisateurs, des vues
    -Chaque catalogue système est propre à la base de données (sauf rare execptions)
    -Recopie depuis la base modèle template1
-Et classique
    -Possibilité de supprimer ou modifier des catalogues, si vous avez les droits

Les bases de données
Mots clé DATABASE
-Ensemble nommés d'objet SQL
-Chaque objet appartient à une seule base (sauf certains catalogues système)
-Se mainpule au même titre que les autres objets

CREATE/ALTER/DROP DATABASE
Les BdD sont séparées physiquement -> accès uniquementt aux objets de la base à laquelle on est connectée.

Connexion à une BdD : gestion du contrôle d'accès au niveau de la connexion
commande
psql -d nom_de_la_base

Par défaut, nom_de_la_base = nom_user

psql [options possibles :]
-d + bd
-U user
-h info
-l lister les BdD

Les schémas
Mot clé SCHEMA (!! non standard SQL)
-Notion d'espace de nommage
    -aucun conflict de noms entre les objets de différents schémas d'une même BdD
    -Catalogue : pg_namespace
-Une base de données contient un ou plusieurs schémas
    Tous les objets de la base de données seront contenus dans un schéma
-Utilité?
    -Différents utilisateurs sur une m^ BdD sans interférence
    -Organsation des objets de la base : créer des groupes logiques pour faciliter la gestion.

Création : 
CREATE SCHEMA nom_schema

accès à un objet d'un schéma
-nom_schéma.nom_objet

Création d'un objet dans un schéma
CREATE OBJET nom_schema.nom_objet

Supprimer un schema
DROP SCHEMA nom_schema[CASCADE/RESTRICT]

Le schéma par défaut, le schéma public, par défaut dans une base de données. Il n'est pas obligatoire peut être supprimer.
Si aucun schéma n'est créé, les objets sont créés dans PUBLIC

Chemin de parcours des schémas : search_path
SHOW search_path
Liste les schémas par ordre de recherche
->Si aucun préfix sur l'objet : recherche dans chacun des schémas de search_path de manière ordonnée

Modification du chemin
SET search_path TO "truc", "$USER", public;

le schéma truc doit exister, modification locale à al connexion sur la DATABASE courante.

Liste des schémas : 
\dn

\dt liste les tables de la base de données, recherche uniquement dans le search_path

Le search_path se réinitialise à chaque connexion

Le ROLE
(Non standard SQL)
-Entité qui peut posséder des objets et avoir des droits
    -Rôle de la base /=/ utilisateur du systeme d'exploitation
    -global aux bases de données
    -Affecte les droits d'accès sur ses objets pour les autrs rôles
-Catalogue des rôles : pg_roles

SELECT rolname FROM pg_roles
ou
\du

Un "useré est un rôle qui a le droit de connexion
-Détermination des privilèges par rapport au rôle spécifié lors de la connexion

psql -U nom_user

L'utilisateur initial : postgres
-Rôle par défaut d'un SGBD postgreSQL nouvellement installé
-Droits d'un super utilisateur : aucune vérifiaction de droit avant l'éxécution d'une action

Un role peut être à la fois une personne et un groupe de personne (interêt : partage commun de droits)
Possibilité de changer de rôle : SET ROLE to group_user;
-Si nom user fait partie du group_user
-current_user prend alors la valeur group_user

Création d'un rôle, groupe de rôle

CREAT ROLE nom [LOGIN]

CREATE ROLE autre_nom [SUPERUSER|CREATEDB|CREATEROLE]
modification avec ALTER, suppression avec DROP

Quelques autres objets du SGBD :
-VIEW
-INDEX
-SEQUENCE

Les vues (VIEW)
-> correpond à une table virtuelle; données non stockées phyisquement, requete sur une table stockée dans la vue;
Nom doit être différent de cleui d'une table, d'un index ou d'une séquence

Objet dynamique -> modification des données sources de la vue -> modification de la vue

Pourquoi utiliser une vue : 
-Utilisation fréquente du résultt d'une requête, Alléger des requêtes trop lourdes

Création CREATE VIEW nom_view AS SELECT requete;

Utilisation : SELECT ? FROM nom_view

Les INDEX
Notion de noms standards
-Méthode courante augmentant les performances du SGBD
-Méthodes d'indexations : arbres, tables de hachage
-Algorithme de recherche spécifique au type d'index
-Même intérêt que les index de livres

Pourquoi l'utiliser :
++ retrouver une ligne plus rapidement
-ajout d'une surcharge du SGBD
à utiliser à bon escient

Un index est cré automatiquement sur chaque clé primaire


SEQUENCE : table permettant la génération d'entier
Utilisation des valeurs avec
-nextval() : valeur suivante
-curval() : valeur courante

FUNCTION : 
Identificateurs demandant l'éxécution au sein d'une requête SQL d'une opération programmée
->le résultat en retour s'insère en lieu et place de l'appel de la fonction

Objet lié à une base de donnée
_________________________

