************************************
Cours de Prolog,
amené pour vous par un chuiss
************************************


Clé du cours de Programmation logique sur Umitice : PROLOG2014

Cours du 18/03/2014

PROLOG
Programmation Logique

Sources pédagogiques:
-LearnProlognow.org

On utilisera l'interpréteur SWI Prolog. Il est également possible d'utiliser GNU Prolog.

SWI Prolog :
-le plus diffusé, avec de nombreuses ressources pédagogique.
-Utilisable avec Linux/Windows/Mac OS

GNU Prolog est interfaçable avec du C.

Prolog existe depuis une 40taine d'années. Il y a des normes ISO (respectés par SWI et GNU Prolog)

·Aborder les 3 constructions de bases en Prolog :
    -Faits
    -Règles
    -Requêtes

·Introduire d'autres concepts :
    -Le rôle de la logique
    -L'unification avec l'aide de variables

-"Programmation Logique"
-Langage déclaratif
-Très différents d'autres langages de programmation (procéduraux)
-Pertinent pour des applications nécessitant des connaissances riches


Histoire de prologue
-Premier interpréteur Prolog par Colmerauer et Roussel à Lumigny(Université d'Aix-Marseille) en 1972.
Ils travaillaient à l'origine sur le traitement du langage(traduction automatique)
-1977 : implementation d'un nouvel interpréteur
-1980 : Implémentation de Grammaires de Clauses, définies par Perreira et Warren
-Dans les années 1980s, Prolog gagne en popularité particulièrement en Europe et au Japon, très utilisé dans les systèmes experts(systèmes analysant des questions et interrogeant des bases de données).
-2005 : Prolog utilisé par la NASA pour implémenter une interface en langage naturel pour l'ISS.

Idée de base ds Prolog :
-Rprésenter une situation donnée
-Décrire la situation considérée
-Poser une question
-Prolog déduit logiquement de nouveaux faits sur la situation que nous avons décrite.
-Prolog nous rend ses déductions comme réponses.

·Penser de manière déclarative et non procédurale
    -Challenge
    -Nécessite un état d'esprit différent
·Langage de haut niveau
    -Pas aussi efficace que le C (par ex)
    -Pertinent pour du prototypage rapide
    -Utile pour un grd nbre d'applications en intelligence artificielle


Base de connaissances 1

femme(mia).
femme(jody).
femme(yolanda).
joueAirGuitar(jody).
fete.


On liste un ensemble de faits : commencés par une minuscule, finies par un point. Avec ou sans parenthèses

Ensuite, si on demande à l'interpréteur des faits :
?- femme(mia)
yes

Il répond si l'information est enregistrée ds les connaissances.

Si on pose la question
?-tatouée(mia)
il répondra que le prédicat tatouée n'existe pas.


Base de connaissance 2 :

cool(yolanda).                              <-fait
ecoute2LaMusique(mia).                      <-fait
ecoute2LaMusique(yolanda):-cool(yolanda).   <- règle : la partie de gauche est vraie uniquement si ce qui est à droite est vrai
joueAirGuitar(mia):- ecoute2LaMusique(mia). <- idem
joueAitGuitar(yolanda):-ecoute2laMusique(yolanda).

Il y a cinq clauses dans cette base.
Il y a deux faits et trois règles.
Une clause se finit par un point.

Il y a trois prédicats dans cette base de connaissance.

Base de connaissance 3

cool(vincent).
ecoute2LaMusique(butch).
joueAirGuitar(vincent):-coute2LaMusique(vincent), cool(vincent).
joueAirGuitar(butch):-cool(butch).
joueAirGuitar(butch):-ecoute2LaMusique(butch).

La virgule indique une conjonction, un 'et'
Le point virgule indique un 'ou'

Prolog a clairement un lien avec la logique :
·Opérateurs :
    -Implication :-
    -Conjonction ,
    -Disjonction ;
·utilisation du modus ponens
·négation   (pas portée de manière optimale)

Ce n'est pas de la prog logique à 100%.

Base de connaissance 4 :

femme(mia).
femme(jody).
femme(yolanda).     -> Arité de 1

aime(vincent, mia). -> Arité de 2
aime(marsellus, mia).
aime(mon_chou, lapin).
aime(lapin, mon_chou).


Si on demande
?- femme(X)     -> Une lettre en Majuscule est une variable. Prolog balance donc les valeurs possibles
X = mia;        -> Le point virgule est entré par l'utilisateur pour passer à la valeurs suivante
X = jody;
X = yolanda;
no

Base de connaissance 5

aime(vincent, mia).
aime(marsellus, mia).
aime(mon_chou, lapin).
aime(lapin, mon_chou).

jaloux(x, y):-aime(X, Z), aime(Y,Z).

Si on pose la question :
?-jaloux(marsellus, W).
W = Vincent



À Partir de quels éléments sont construits les faits, règles et requêtes :

Terme -->Termes complexes
|
v
Termes Simples -> Constantes
|
v
Atomes


Atomes :
·Une séquence de caractères de lettres, minuscules ou majuscule, chiffres ou _, commençant par une minuscule.

·une séquence arbitraire de caractères



Variables :
·une séquence de caractères de lettres minsucules ou majuscules, chiffres ou souligné, commençant par une majuscule ou souligné.
ex :X, Y, _var, Variables.

Termes Complexes
·Atome, nombres et variables sont les briques pour construire des termes complexes.
·Les termes complexes sont construits par un foncteur (qui distribue le conrier) directement suivi par une séquence d'arguments
·Les arguments sont entre parenthèses, séparés par des virgules
·Le foncteur doit être un atome.

Arité : le nombre d'argument est appelé arité.

En prolog, l'arité est importante, puisqu'il est possible de finir deux prédicats avec le même foncteur, mais avec une arité différente.


______________________________________
Cours du 07/04/2014

Les listes

·Les listes, une structure de données importante très souvent utilisée en programmation Prolog.

Une liste est une séquence finie d'éléments.

Exemple de listes en Prolog.

[mia, vincent, jules, yolanda]
[mia, criminel(honeybunny), X, 2, mia]
[]
[mia, [vincent, jules], [butch, ami(butch)]]
[[], dead(z), [2, [b,c]], [], Z, [2, [b,c]]]

Les éléments d'une liste sont entourés de crochet.
La longueur d'une liste est le nombre d'élément qu'elle contient.
Tous les types d'élements de Prolog peuvent être les éléments d'une liste (termes simples, complexes, listes).

La liste non vide peut être vue comme étant composée de deux parties :
-La tête
-la queue
·La tete est le premier élément.
·la queue est le reste :
    -La queue est la liste qui rste quand on enleve le premier élément.
    -La queue d'une liste est une liste.

Lorsqu'il y a un élément, le reste est une liste vide implicite.

La liste vide n'a ni queue ni tête.
Pour Prolog, [] est une liste spéciale, simple, sans structure interne.

Prolog dispose d'un opérateur prédéfini pour décomposer les listes en sa tête et sa queue : |

l'opérateur | est un outils indispensable pour écrire des prédicats.

Example :

?-[Tete| Queue] = [mia, vincent, jules, yolanda].

Tete = mia
Queue = [vincent, jules, yolanda]

Tete et Queue sont des variables, séparées par |, qui sépare la tete de liste de sa queue.

et si on écrit
?-[X, Y| Z] = [mia, vincent, jules, yolanda].

X = mia
Y = vincent
Z = [jules, yolanda]

et

?-[X|Y] = [].

no

c'est une erreur!

pour obtenir le deuxième et quatrième élément, on fait ceci :

?-[_, X2, _, X4| _] = [mia, vincent, marsellus, jody, yolanda]


_, une variable annonnyme est utilisée quand une variable est nécessaire, mais que son instanciation de nous intérresse pas.

Chaque occurence de la variable annonyme est indépendante : pas besoin de _1, _2, etc..


·Comment savoir su quelque chose appartient à une liste ou pas?

·écrivons le prédicat member/2.

member(X, [X|_).
member(X, [_|T) :- member(X, T).


Le prédicat member/2 fonctionne par récursivité pour parcourir une liste :
    -traiter la tête
    -Faire récusrivement la même chose à la queue.

Technique très commune en Prolog et qui doit être maîtrisée.

example

Le prédicat a2b/2 prends deux listes comme arguments et obtient un succès si
-le premier argumment est une liste de a, et
-le deuxième argumment est une liste de b, de la même longueur.

a2b([],[]).
a2b(a|L1], [b|L2]) :- a2b(L1, L2).


Résumé de la séance : 
-Liste et prédicats récursifs pour manipuler des listes.
-Types de programmation essentiel en Prolog.
-La plupart des prédicats Prolog sont des variantes de ces prédicats

__________________________________________________________
Cours du 22/04

Cours 5 : Arithmétique

·contenu :
-présentation des fonctionnalités de Prolog pour l'arithmétique

Prolog fournit un ensemble d'outils pour l'arthmétique

exemples :
?- 5 is 2+3.
?- 12 is 3*4

définir un prédicat qui ajoute trois et double

addThreeAndDouble(X, Y) :- Y is (X + 3) * 2.

il est important de savoir que +, -, / et * ne font pas d'arithmétique.
C'est le "is" qui force l'évaluation arthmétique.

= ne force pas l'évaluation arithmétique, mais l'unification, on a donc
?- X = 3 + 2
X = 3 + 2
yes

is s'agit d'une instruction pour que Prolog fasse les calculs. Il ne s'agit pas d'un prédicat ordinaire. Il y a donc des contraintes.

l'argumment doit forcément être une formule arithmétique (is est d'arité /2).

Il est possible d'utiliser des variables sur la droite du prédicat is
mais au moment où Prolog réalise l'évaluation, ces variables doivent êtres unifiés avec un terme Prolog qui n'est pas une variable
Ce terme Prolog doit être une expression arithmétique.

3+2 est en fait +(3, 2), avec + un foncteur, et les argumments ensuite.
is fonctionne pareillement :

?- is(X, +(3, 2)).

Quelle est la longueur d'une liste :
-Longueur d'une liste vide = 0
-Longueur d'une liste non vide = 1 + longueur de sa queue.

correction :
len([], 0).
len([_|L], N):- len(L, X), N is X +1.

--------------
Les accumulateurs

La correction est simple et efficace, mais il existe une autre manière de calculer la longueur d'une liste vide.

réécriture du prédicat longueur avec accumulateur.
acclen est d'arité 3
-la valeur initiale de l'accumulateur est 0.
-on ajoute à l'accumulateur chaque fois qu'on remonte dans la liste.
-Quand on arrive à la liste vide, on unifie le resultat avec l'accumulateur

ainsi :
acclen([], Acc, Length) :- Length = Acc.
acclen([_ -L], OldAcc, length):-NewAcc is OldAcc + 1, acclen(L, NewAcc, Length).

Comparaison d'entiers
>, <, =, >=, =<, ces opérateurs dorce l'évaluation des arguments de gauche et de droite.

--------------------
Theorie : 
-définir un concaténateur/3, pour concaténer deux listes, et illustrant ce qui peut être fait avec.
-trouver deux manières de renverser une liste.

- concat(L1, L2, L3) doit être vrai si la liste L3 est le résultat de la concaténation de L1 et L2.

correction :
append([], L, L).
append([H, L1], L2, [H, L3]):- append(L1, L2, L3).
