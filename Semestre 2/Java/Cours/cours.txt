Notes du suisse. En surplus des cours disponibles en PDF

Cours 3 (le 03/02/2014)

Les contrôles d'accès

Quand on déclare une nouvelle classe en java, on peut indiquer les niveaux d'accès permis à ses VI et à ses méthodes
-Aucun attribut : accessibles par les classes qui font parties du même packages, inaccessible par les autres.
****

Les VI et les méthodes protected sont seulement accessibles dans les sous classes de la classe.

Les variables et méthodes de classe

Les variables de classes :
-Une variable de classe est "locale" à la classe elle même
-c'est une variable partagée par tout objet instance de la classe qui la déclare
-Pour déclarer des variables de classes et des méthodes de classe, il faut les déclarer en 'static'

Les Métodes de classe
-Ce sont des méthodes communes à une classe entière
-Ne peuvent opérer que sur les V de classes
-Ne peuvent pas invoquer des méthodes d'instance
-Il faut les déclarer en static.

static permet de déclarer qqch (variables/méthodes) en tant que membre de la classe, c'est à dire l'équivalent des variables et méthodes de classes de Ruby => @@truc/Class.chose

ex :
Class Chose {
    int x;          //->Variable d'instance
    int y;          //->Variable d'instance
    static int z;   //->Variable de classe

    void faire_chose()          //->méthode d'instance
    static void faire_truc()    //->méthode de classe
}


Les classes abstraites
-Une classe abstraite est une dans laquelle on peut définir des méthodes qui ne sont pas implémentées par la classe.
-La classe abstraite définit un état générique et un comportement générique.

L'avantage de créer ce type de classe est de permettre l'héritage à différente sous classes, car il n'est pas possibles d'instancier une classe abstraite.

abstract class A {
    ....
    abstract void P();

    void Q();
}

Initialisaeurs
Java permet de féinir des blocs d'initialisations
-Pour les variables de classes :
    -une classe peut avoir un nombre quelconque d'initialiseur statique
    -Le corps de chaque bloc est incorporé dans la méthode dinitialisation de classe avec les initialisations statiques des champs
-Pour les variables d'instances
    -une classe peut avoir un nombre quelconque d'initialiseur d'instance
    -Le corps de chaque bloc est inséré au début de chaque constructeur de la classe
-En pratique, c'est rarement utilisé
    -utiles parce qu'ils placent le code d'initialisation à coté du champ plûtot que de le séparer dans un constructeur
    -Leur utilité principale est dans l'élaboration des classes internes anonymes dont nous parlerons un peu plus tard.

Initialiseur statique
exemple :
class Cup{ Cup(int marker) (System.out.println("Cup(" + marker + " ")"))
            void f(int marker) (System.out.println("f(" + marker + ")");)
}

class Cups{
    static Cup c1;
    static Cup c2;
    static {c1 = new Cup(1); c2 = new Cup(2)}       //Initialiseur de la classe!!
}



Les tableaux :

Déclararation
multidimensionnels
deux syntaxes : 
type nomdutableau []+

Seule la première dimension du tableau doit être impérativement fixée à la création :
char c[][] = new char [10][]
Les autres dimensions peuventêtre fixées ultérieurements
c[0] = new char[24];
Chaque élément du tableau est un objet;

Des chaînes peuvent être crées implicitement, en utilisant une chaîne quotée, ou en utilisant + ou += sur deux objets de types strings

Opérations de base sur les chaînes
-indexOf(Char ch) : première position de ch
-indexOf(char ch, int start) : première position de ch >= start
-indexOf(String str) : première position de str
-indexOf(String, int start) : première position de str>= start
-lastIndexOf(char ch) : dernière position de ch
-lastIndexOf(char ch, int start) : dernière position de ch=<start


La classe String comporte plusieurs méthodes permettant de comparer plusieurs chaînes ou parties de chaînes.
La méthode boolean equals(Object) retourne true si le contenu de l'objet String pass en argumment est le même que le contenu de l'objet sur lequel s'applique la méthode.


-Il existe des types primitifs qui ne sont pad des objets : char, int, float, boolean, etc.
-A chacun de ces types correspondune classe : Character, Integer, Float, Boolean, etc.
-Chaque classe permet d'instancier un objet représentant une valeur d'un type primitif.
-Ces classes offrent, à travers leurs méthodes, un ensemble d'opérations usuelles


La classe Character
Constructeur
-Character(char value)
Méthodes : 
-char charValue()
Méthodes statiques
-boolean isLowerCase(char ch)
-boolean isUpperCase(char ch)
-boolean isDigit(char ch)
-boolean isLetter(char ch)

-La classe Boolean représente un type booléen sous forme de classe
-Par une convention, une chaîne de caractère "true" représente la valeur true quelque soit la casse.

Les classes numériques
-Chaque classe représentant un type numérique dispose des méthodes suivantes :
    -une méthode statique  toString(type) retournant un objet String représentant le valeur du type primitif TYPE passé en argument
    -une méthode statique valueOf(String)


_________________________________________
Cours du 17/02/2014

Les conteneurs Java

Deux concepts :
-Les collections, associés à une regle définissant leur comportement
-Les Maps, un ensemble de paires clefs-valeurs(possibilité de récupérer une collection dans une map)

Les conteneurs osnt conçus pour stocker n'importe quel type d'objet. Cela a deux inconvénients : perte du typage, ce qui oblige a transtyper(caster)

Les itérateurs de parcours 
ce sont des objets légers permettant de parcourir une collection. Les méthodes pouvant être utilisées sont de type hasNext() et next(). Les éléments doivent être supprimés de la collection (avec remove()) et surtout pas supprimés pendant le parcours avec la méthode de la collection.

l'utilisation d'itérateurs permet d'écrire des portions de code générique (ne dépendant pas du type de la collection)

Les interfaces concernées par le stockage des objets sont Collection, List, Set et Map.

les methodes : add(), addAll, clear, containsAll, isEmpty, iterator, remove, removeAll, size

Les listes (elles sont ordonnées). Elles produisent des ListIterators, qui permettent de parcourir la liste dans les deux sens.
La classe LinkedList (fournit des methodes comme addFirst, top, pop, etc)

Les Sets (ensemble) ont la même interface que les collections, mais ayant un comportement particulier, l'absence de doublon
L'interface Set : les objects ajoutés à un Set doivent redéfinir la méthode equals pour pouvoir éviter les doublons.
les SortedSets stockent les objets triés.

Les Maps suivent le principe du dictionnaire (clé - valeur)
D'un coté les HashMap, de l'autre les TreeMap

Comment définir un ordre sur un objet :
2 manières : soit de manière externe, avec un objet comparateur qui peut dire si deux objets sont dans l'ordre
             soit de manière interne, ou ce sont les objets eux même qui sont capables de se comparer entre eux(on parle d'ordre naturel)

Ordre défini par un comparateur; renvoyant négatif si 1 strictement inférieur à 2, nul si egaux et positif si 1 superieur a 2.

La relation d'ordre doit toujours être consistante avec equals





_____________________________________________
cours du lundi 24 Janvier

Notes sur le cours sur les exceptions

erreurs fréquentes :
-librairies
-environnement d'éxécution
-erreur de programmation
-erreur matériel

Lancer ou lever une exception peut se faire automatiquement (lors d'une division par 0, lors d'un cast impossible, etc), ou manuellement, avec throw( )
Capter ou capturer une exception se fait avec try{  }catch{  };

throw génère une erreur en levant un exception /=/ Throws remonte l'erreur au bloc appelant  => Déclarer ou traiter

throw(exception) avec exception une classe héritant de la classe Exception en Java (extend Exception à la déclaration)
Il se place après une vérification (comparaison, retour, etc), alors que Throws se place à droite des parenthèse d'une méthode.



___________________________________________________________________
Cours du 11/03/2014

Les modifications apportées par Java 1.5.

Les buts : rendre le code plus robuste

Nouveautés :
-Autoboxing
-Static Import
etc


Les méthodes à nbres variables d'arguments :
On utilise ... pour signifier que le nbre d'argument n'est pas défini.
ex : public static int additionner(int ... valeurs){}
Pas possibles de mixer des éléments unitaires et des ensembles, même s'ils sont du même type.

La classe Scanner met à disposition des fonctions pour la lecture de données à travers la console système ou tout flux de données.


Les génériques permettent de faire des abstractions sur les types.
-L'exemple le plus courant de l'utilisation des génériques est celui des containers.

Le transtypage est gênant
-Mais les génériques de Java 1.5 permettent de ne plus se retrouver confronter à ce problème de transtypage
-Il devient possible de restreindre le type de objets contenus dans un container à un certain type.

Ce qui se trouve entre chevrons sont les paramètres formels de type des interfaces List et Iterator.
Dans le cas de notre liste d'entier, le paramètre formel E (voir pdf) est remplacé par le paramètre formel Integer.

Attention :
Si Foo est un sous type(sous classe) de Bar, et G une implémentation de Foo, alors G<Foo> n'est pas un sous-type de G<Bar>. Bien qu'étrange, c'est fait exprès : B étant une sous classe de A, une liste de B n'est pas une liste de A. Le contraire impliquerait qu'on puisse ajouter des A dans une liste de B, ou vice versa.

Il existe un moyen de définir le super-type de toutes les collections : Collection<?>
On peut parler de collection d'inconnus. On appele <?> la wildcard.
Il est possible de spécifier une Classe et ses sous classes, avec :
Collection<? extends Classe>
ce qui s'appelle une bounded wildcard. Elles sont bien pratiques pour parcourir une liste contenant des objets dérivant tous de la même classe.
Cependant, les bounded wildcard connaissent leurs limites : impossible d'y ajouter des objets dérivant de la même classe, tout comme les wildcards normales.

Tentons d'écrire une méthode qui à partir d'un tableau d'objet, et d'une collection, place les éléments du tableau dans la collection.

les méthodes génriques apportent une réponse à ce problème.
Les déclarations de méthodes peuvent être générique : paramétrées par un ou plusieurs paramètres de type

Il est possible aussi d'utiliser à la fois les méthodes génériques et les wildcard. Pour copier des objets d'une liste à l'autre
class Collections {
    public static <T> void copy(List<T> dest, List<?extends T> src){...}
}

Une classe générique est partagée par toutes ses invocations :
Toutes les instances d'une classe générique ont la même runtime class.


_________________________________________________________
Cours du 21/03/2014

Les entrées sorties en JAVA

Les différentes sources :
-fichiers
-console
-Réseaux

En java existe les classes io pour traiter des flots d'octets et/ou des flots de caractères.
Les classes nio ont été ajoutés ensuite.

Java.io : Bibliothèque de classes et d'interfaces gérant les E/S
Ces bibliothèques utilisent l'abstraction d'un flux[stream]

Deux familles de flux :
-flux d'octets (nbres entiers/réels, images, sons, etc)
-flux de caractères (textes, html, xml)

Les noms de classes se décomposent en un préfixe et un suffixe

suffixes(classes abstraites de flux)
Flux d'entrée : Reader( flux de char) , InputStream (flux d'octets)
Flux de sortie :Writer(flux de char), OutputStream(flux d'octets)

Préfixes : indiquent avec quoi on communique (File, Object, String)

Différents filtres :
-Mise en Tampon (Buffered) E/S
-Conversion des données (Data) E/S uniquement pour les flux d'octets
-Impression (Print) S uniquement
-Sérialisation (Object) E/S uniquement pour les flux d'octets

·InputStream :
-Classe abstraite
-trsprt de données binaires en lect sous forme d'octets

·OutputStream :
-classe abstraite
-trsport de données binaires en écriture sous forme d'octet
-méthodes : 
    -write(int)
    -void write(byte b[]);

_____________________________________________________________
Cours du 08/04/2014

Les packages pour les GUI :
    -AWT(Abstract Windows Toolkit) obsolète
    -Swing
    -SWT(Standard Widget Toolkit)
    -Java FX (plateforme construite sur la technologie Java.


AWT vs Swing ?
Swing ne remplace plas, il complète AWT : il est plus riche, et est construit au dessus. Ce sont a peu près les mêmes composants.
AWT prend en charge des composants lourds : ils changent selon l'OS utilisé.

Swing prend en charge des composants légers, implémentés par Java, l'apparence et les fonctionnalités de changeant pas. Mais est plus lent.


Structure d'une IG :
-conteneurs (sous-classes de container, soit des Panel (et son sous type Applet) soit des Windows(Dialogue et Frame).
-composants (parties visibles de l'IG), sous classes de java.awt.component (Button, ComboBax, etc).
-Gestionnaire de mise en page/placement/disposition : les Layout manager
-Gestionnaire d'évennements.
